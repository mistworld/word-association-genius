<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>Ïó∞ÏÉÅÏ≤úÏû¨ - IQ 140 Ïó∞ÏÉÅÌÄ¥Ï¶à</title>
    
    <meta name="description" content="ÎãπÏã†ÏùÄ Ï≤úÏû¨Ïù∏Í∞ÄÏöî? ÏãúÎÉÖÏä§Í∞Ä Ïó∞Í≤∞ÎêòÎäî ÏßúÎ¶øÌïú ÏæåÍ∞êÏùÑ ÎäêÍª¥Î≥¥ÏÑ∏Ïöî!">
    <meta name="theme-color" content="#A8D8EA">
    
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            -webkit-tap-highlight-color: transparent;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            background: linear-gradient(135deg, #F8F9FA 0%, #E8F4F8 100%);
            min-height: 100vh;
            color: #333;
            overflow-x: hidden;
        }

        body::before {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: 
                radial-gradient(circle at 20% 30%, rgba(168, 216, 234, 0.4) 0%, transparent 50%),
                radial-gradient(circle at 80% 70%, rgba(170, 236, 215, 0.4) 0%, transparent 50%);
            pointer-events: none;
            z-index: -1;
        }

        .container {
            max-width: 100%;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }

        /* üé® Ïù∏Ìä∏Î°ú ÌôîÎ©¥ - ÎßàÎÖÄÏä§ÎüΩÍ≥† Ïã†ÎπÑÎ°úÏö¥ */
        .start-screen {
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            padding: 30px 20px;
            text-align: center;
            position: relative;
            overflow: hidden;
        }

        .start-screen::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 300px;
            height: 300px;
            background: 
                radial-gradient(circle, transparent 30%, rgba(168, 216, 234, 0.1) 31%, transparent 32%),
                radial-gradient(circle, transparent 50%, rgba(170, 236, 215, 0.1) 51%, transparent 52%);
            animation: rotateCircle 20s linear infinite;
            z-index: -1;
        }

        @keyframes rotateCircle {
            from { transform: translate(-50%, -50%) rotate(0deg); }
            to { transform: translate(-50%, -50%) rotate(360deg); }
        }

        .sparkles {
            position: absolute;
            width: 100%;
            height: 100%;
            pointer-events: none;
        }

        .sparkle {
            position: absolute;
            width: 4px;
            height: 4px;
            background: white;
            border-radius: 50%;
            animation: sparkle 2s ease-in-out infinite;
            box-shadow: 0 0 10px rgba(255, 255, 255, 0.8);
        }

        @keyframes sparkle {
            0%, 100% { opacity: 0; transform: scale(0); }
            50% { opacity: 1; transform: scale(1); }
        }

        .title-main {
            font-size: 3em;
            font-weight: 900;
            margin-bottom: 12px;
            background: linear-gradient(135deg, #A8D8EA, #FF9AA2, #FFD93D, #AAECD7);
            background-size: 300% 300%;
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            animation: gradientShift 3s ease infinite;
            line-height: 1.1;
        }

        @keyframes gradientShift {
            0%, 100% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
        }

        .subtitle {
            font-size: 1.2em;
            color: #666;
            margin-bottom: 6px;
            font-weight: 500;
            animation: fadeInUp 1s ease-out 0.2s both;
        }

        .highlight {
            font-size: 1.1em;
            color: #A8D8EA;
            font-weight: bold;
            margin-bottom: 35px;
            animation: fadeInUp 1s ease-out 0.4s both;
        }

        @keyframes fadeInUp {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .start-button {
            background: linear-gradient(135deg, #A8D8EA, #AAECD7);
            color: white;
            border: none;
            border-radius: 25px;
            padding: 18px 40px;
            font-size: 1.3em;
            font-weight: bold;
            cursor: pointer;
            box-shadow: 0 10px 30px rgba(168, 216, 234, 0.5);
            animation: pulseButton 2s ease-in-out infinite;
            position: relative;
            overflow: hidden;
        }

        .start-button::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 0;
            height: 0;
            border-radius: 50%;
            background: rgba(255, 255, 255, 0.3);
            transform: translate(-50%, -50%);
            transition: width 0.6s, height 0.6s;
        }

        .start-button:active::before {
            width: 300px;
            height: 300px;
        }

        .start-button:active {
            transform: scale(0.95);
        }

        @keyframes pulseButton {
            0%, 100% { 
                transform: scale(1);
                box-shadow: 0 10px 30px rgba(168, 216, 234, 0.5);
            }
            50% { 
                transform: scale(1.05);
                box-shadow: 0 15px 40px rgba(168, 216, 234, 0.7);
            }
        }

        /* Ìó§Îçî */
        .header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border-bottom: 1px solid rgba(168, 216, 234, 0.3);
            padding: 8px 12px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            position: sticky;
            top: 0;
            z-index: 100;
        }

        .compact-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            gap: 8px;
        }

        .header-left {
            display: flex;
            align-items: center;
            gap: 8px;
            flex: 1;
        }

        .home-button {
            width: 32px;
            height: 32px;
            background: linear-gradient(135deg, #A8D8EA, #AAECD7);
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            box-shadow: 0 2px 6px rgba(168, 216, 234, 0.3);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
        }

        .round-info-compact {
            display: flex;
            flex-direction: column;
            gap: 2px;
        }

        .round-title {
            font-size: 15px;
            font-weight: bold;
            color: #555;
        }

        .problem-number {
            font-size: 11px;
            color: #888;
        }

        .header-right {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .key-count {
            display: flex;
            align-items: center;
            gap: 4px;
            background: linear-gradient(135deg, #FFD93D, #FF9AA2);
            padding: 6px 10px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: bold;
            color: white;
            box-shadow: 0 2px 6px rgba(255, 154, 162, 0.3);
        }

        .settings-button-header {
            width: 32px;
            height: 32px;
            background: rgba(255, 255, 255, 0.9);
            border: 1px solid rgba(168, 216, 234, 0.3);
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #666;
        }

        .progress-dots {
            display: flex;
            gap: 3px;
            background: rgba(168, 216, 234, 0.2);
            padding: 4px 6px;
            border-radius: 8px;
        }

        .dot {
            width: 5px;
            height: 5px;
            border-radius: 50%;
            background: #DDD;
            transition: all 0.3s;
        }

        .dot.completed {
            background: linear-gradient(135deg, #AAECD7, #85D4C0);
        }

        .dot.current {
            background: linear-gradient(135deg, #A8D8EA, #85C1E0);
            transform: scale(1.2);
        }

        /* Ï≤úÏû¨ ÌÉÄÏù¥Î®∏ */
        .genius-timer {
            background: linear-gradient(135deg, #FFD93D, #FFB347);
            border-radius: 8px;
            padding: 6px 8px;
            margin: 4px 0;
            color: white;
        }

        .genius-timer-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 4px;
        }

        .genius-timer-text {
            font-size: 11px;
            font-weight: bold;
        }

        .genius-timer-count {
            font-size: 12px;
            font-weight: bold;
        }

        .timer-bar {
            height: 4px;
            background: rgba(255,255,255,0.3);
            border-radius: 2px;
            overflow: hidden;
        }

        .timer-progress {
            height: 100%;
            background: white;
            transition: width 1s linear;
            border-radius: 2px;
        }

        /* Î©îÏù∏ ÏΩòÌÖêÏ∏† */
        .main-content {
            background: rgba(255, 255, 255, 0.8);
            backdrop-filter: blur(10px);
            border-radius: 16px 16px 0 0;
            padding: 15px;
            box-shadow: 0 -4px 20px rgba(0,0,0,0.1);
            flex: 1;
            margin-top: auto;
            display: flex;
            flex-direction: column;
            gap: 12px;
        }

        .hints-section {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 12px;
            padding: 12px;
            border: 1px solid rgba(168, 216, 234, 0.3);
            flex: 1;
            min-height: 0;
            display: flex;
            flex-direction: column;
        }

        .hints-container {
            flex: 1;
            overflow-y: auto;
        }

        .hint-item {
            background: rgba(248, 249, 250, 0.9);
            border: 1px solid rgba(168, 216, 234, 0.2);
            border-radius: 10px;
            margin-bottom: 8px;
        }

        .hint-item.locked {
            opacity: 0.6;
        }

        .hint-content {
            padding: 10px 12px;
        }

        .hint-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 4px;
        }

        .hint-left {
            display: flex;
            align-items: center;
            gap: 8px;
            flex: 1;
        }

        .hint-number {
            width: 26px;
            height: 26px;
            background: linear-gradient(135deg, #A8D8EA, #85C1E0);
            border-radius: 6px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 13px;
            font-weight: 900;
            flex-shrink: 0;
        }

        .hint-text {
            font-size: 16px;
            font-weight: 700;
            color: #333;
            line-height: 1.4;
        }

        .hint-controls {
            display: flex;
            gap: 4px;
        }

        .unlock-btn {
            background: linear-gradient(135deg, #ed8936, #dd6b20);
            color: white;
            border: none;
            border-radius: 6px;
            padding: 6px 10px;
            font-size: 11px;
            cursor: pointer;
            font-weight: 600;
        }

        .description {
            background: rgba(170, 236, 215, 0.15);
            border: 1px solid rgba(170, 236, 215, 0.3);
            border-radius: 6px;
            padding: 8px 10px;
            margin-top: 6px;
            font-size: 14px;
            line-height: 1.5;
            color: #444;
        }

        .info-grid {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 8px;
            margin-bottom: 10px;
        }

        .info-box {
            background: rgba(248, 249, 250, 0.9);
            border: 1px solid rgba(168, 216, 234, 0.2);
            border-radius: 10px;
            padding: 10px;
            text-align: center;
        }

        .info-box.category {
            background: rgba(170, 236, 215, 0.1);
        }

        .info-box.chosung {
            background: rgba(255, 154, 162, 0.1);
        }

        .info-label {
            font-size: 10px;
            color: #888;
            margin-bottom: 4px;
            font-weight: 600;
        }

        .info-value {
            font-size: 14px;
            font-weight: 900;
            color: #333;
        }

        .unlock-small {
            background: linear-gradient(135deg, #FF9AA2, #FF6B81);
            color: white;
            border: none;
            border-radius: 5px;
            padding: 4px 8px;
            font-size: 10px;
            cursor: pointer;
            margin-top: 4px;
        }

        .answer-input-wrapper {
            display: flex;
            gap: 8px;
            align-items: center;
        }

        .answer-input {
            flex: 1;
            padding: 14px;
            font-size: 16px;
            font-weight: 600;
            border: 2px solid rgba(168, 216, 234, 0.5);
            border-radius: 10px;
            background: rgba(255, 255, 255, 0.95);
        }

        .answer-input:focus {
            outline: none;
            border-color: #A8D8EA;
            box-shadow: 0 0 0 3px rgba(168, 216, 234, 0.2);
        }

        .submit-button {
            padding: 14px 20px;
            background: linear-gradient(135deg, #A8D8EA, #AAECD7);
            color: white;
            border: none;
            border-radius: 10px;
            font-size: 15px;
            font-weight: bold;
            cursor: pointer;
            box-shadow: 0 4px 12px rgba(168, 216, 234, 0.4);
        }

        .correct-answer {
            background: linear-gradient(135deg, rgba(168, 216, 234, 0.15), rgba(170, 236, 215, 0.15));
            border: 2px solid rgba(168, 216, 234, 0.3);
            border-radius: 12px;
            padding: 18px;
            text-align: center;
        }

        .correct-icon {
            font-size: 40px;
            margin-bottom: 10px;
        }

        .correct-title {
            font-size: 20px;
            font-weight: 900;
            margin-bottom: 8px;
            background: linear-gradient(135deg, #A8D8EA, #AAECD7);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .correct-text {
            font-size: 18px;
            color: #333;
            margin-bottom: 8px;
            font-weight: 700;
        }

        .correct-category {
            font-size: 13px;
            color: #888;
        }

        .next-button {
            width: 100%;
            background: linear-gradient(135deg, #A8D8EA, #AAECD7);
            color: white;
            border: none;
            padding: 14px;
            border-radius: 10px;
            font-size: 16px;
            font-weight: 900;
            cursor: pointer;
            margin-top: 10px;
        }

        .show-answer-section {
            padding: 10px 0;
        }

        .show-answer-btn {
            width: 100%;
            background: linear-gradient(135deg, #e53e3e, #c53030);
            color: white;
            border: none;
            border-radius: 10px;
            padding: 12px;
            font-size: 14px;
            font-weight: bold;
            cursor: pointer;
            display: flex;
            justify-content: center;
            gap: 8px;
        }

        .congratulation-popup {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: linear-gradient(135deg, #A8D8EA, #AAECD7);
            border-radius: 16px;
            padding: 20px 25px;
            text-align: center;
            color: white;
            z-index: 1000;
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
            animation: popIn 0.5s ease-out;
            min-width: 250px;
        }

        .popup-icon {
            font-size: 40px;
            margin-bottom: 8px;
        }

        .popup-title {
            font-size: 20px;
            font-weight: bold;
            margin-bottom: 6px;
        }

        .popup-message {
            font-size: 14px;
        }

        .popup-reward {
            margin-top: 8px;
            padding: 6px 10px;
            background: rgba(255,255,255,0.2);
            border-radius: 8px;
            font-size: 12px;
            font-weight: bold;
        }

        @keyframes popIn {
            0% { transform: translate(-50%, -50%) scale(0.5); opacity: 0; }
            100% { transform: translate(-50%, -50%) scale(1); opacity: 1; }
        }

        .music-panel {
            position: fixed;
            top: 60px;
            right: 12px;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            padding: 12px;
            border-radius: 12px;
            box-shadow: 0 6px 20px rgba(0,0,0,0.15);
            z-index: 98;
            display: none;
            min-width: 160px;
        }

        .music-panel.active {
            display: block;
        }

        .music-controls {
            display: flex;
            flex-direction: column;
            gap: 6px;
        }

        .mute-button {
            padding: 8px;
            background: linear-gradient(135deg, #A8D8EA, #AAECD7);
            color: white;
            border: none;
            border-radius: 8px;
            font-size: 12px;
            font-weight: bold;
            cursor: pointer;
        }

        .mute-button.muted {
            background: linear-gradient(135deg, #CCC, #AAA);
        }

        .round-map {
            padding: 15px;
        }

        .round-grid {
            display: grid;
            grid-template-columns: repeat(5, 1fr);
            gap: 10px;
            margin-top: 15px;
        }

        .round-button {
            aspect-ratio: 1;
            border: none;
            border-radius: 12px;
            font-size: 15px;
            font-weight: 900;
            cursor: pointer;
        }

        .round-button.completed {
            background: linear-gradient(135deg, #AAECD7, #85D4C0);
            color: white;
        }

        .round-button.current {
            background: linear-gradient(135deg, #A8D8EA, #FF9AA2);
            color: white;
            animation: pulse 2s infinite;
        }

        .round-button.locked {
            background: rgba(248, 249, 250, 0.8);
            color: #CCC;
            cursor: not-allowed;
        }

        @keyframes pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.05); }
        }

        @keyframes shake {
            0%, 100% { transform: translateX(0); }
            25% { transform: translateX(-5px); }
            75% { transform: translateX(5px); }
        }
    </style>
</head>
<body>
    <div id="app"></div>

    <script>
        const AudioManager = {
            bgm1: null,
            bgm2: null,
            currentBGM: null,
            correctSound: null,
            wrongSound: null,
            hintSound: null,
            completeSound: null,
            geniusSound: null,
            isAudioUnlocked: false,
            isBGMMuted: false,
            isSFXMuted: false,
            currentBGMIndex: 0,

            async init() {
                try {
                    this.bgm1 = new Audio('bgm1.mp3');
                    this.bgm2 = new Audio('bgm2.mp3');
                    
                    this.correctSound = new Audio('correct.mp3');
                    this.wrongSound = new Audio('wrong.mp3');
                    this.hintSound = new Audio('hint.mp3');
                    this.completeSound = new Audio('complete.mp3');
                    this.geniusSound = new Audio('genius.mp3');
                    
                    [this.bgm1, this.bgm2].forEach(bgm => {
                        bgm.loop = false;
                        bgm.volume = 0.3;
                        bgm.addEventListener('ended', () => {
                            if (!this.isBGMMuted) this.switchBGM();
                        });
                    });
                    
                    [this.correctSound, this.wrongSound, this.hintSound, 
                     this.completeSound, this.geniusSound].forEach(sound => {
                        sound.volume = 0.5;
                    });
                    
                    this.currentBGM = this.bgm1;
                    this.isAudioUnlocked = true;
                    
                    const savedBGM = localStorage.getItem('bgm_muted');
                    const savedSFX = localStorage.getItem('sfx_muted');
                    
                    if (savedBGM) this.isBGMMuted = savedBGM === 'true';
                    if (savedSFX) this.isSFXMuted = savedSFX === 'true';
                    
                    if (!this.isBGMMuted) await this.startBGM();
                } catch (error) {
                    console.log('Ïò§ÎîîÏò§ Ï¥àÍ∏∞Ìôî Ïã§Ìå®');
                }
            },

            async startBGM() {
                if (!this.currentBGM || this.isBGMMuted) return;
                try {
                    await this.currentBGM.play();
                } catch (error) {}
            },

            switchBGM() {
                if (this.isBGMMuted) return;
                this.currentBGMIndex = (this.currentBGMIndex + 1) % 2;
                this.currentBGM = this.currentBGMIndex === 0 ? this.bgm1 : this.bgm2;
                this.startBGM();
            },

            async playSound(soundType) {
                if (this.isSFXMuted || !this.isAudioUnlocked) return;
                
                let sound = null;
                switch(soundType) {
                    case 'correct': sound = this.correctSound; break;
                    case 'wrong': sound = this.wrongSound; break;
                    case 'hint': sound = this.hintSound; break;
                    case 'complete': sound = this.completeSound; break;
                    case 'genius': sound = this.geniusSound; break;
                    case 'click': sound = this.hintSound; break;
                }
                
                if (sound) {
                    try {
                        sound.currentTime = 0;
                        await sound.play();
                    } catch (error) {}
                }
            },

            toggleBGM() {
                this.isBGMMuted = !this.isBGMMuted;
                localStorage.setItem('bgm_muted', this.isBGMMuted.toString());
                
                if (this.isBGMMuted) {
                    [this.bgm1, this.bgm2].forEach(bgm => bgm.pause());
                } else {
                    this.startBGM();
                }
                
                this.updateMusicControls();
            },

            toggleSFX() {
                this.isSFXMuted = !this.isSFXMuted;
                localStorage.setItem('sfx_muted', this.isSFXMuted.toString());
                this.updateMusicControls();
            },

            updateMusicControls() {
                const bgmButton = document.querySelector('.bgm-button');
                const sfxButton = document.querySelector('.sfx-button');
                
                if (bgmButton) {
                    bgmButton.textContent = this.isBGMMuted ? 'üîá BGM OFF' : 'üéµ BGM ON';
                    bgmButton.className = this.isBGMMuted ? 'mute-button muted bgm-button' : 'mute-button bgm-button';
                }
                
                if (sfxButton) {
                    sfxButton.textContent = this.isSFXMuted ? 'üîá Ìö®Í≥ºÏùå OFF' : 'üîä Ìö®Í≥ºÏùå ON';
                    sfxButton.className = this.isSFXMuted ? 'mute-button muted sfx-button' : 'mute-button sfx-button';
                }
            }
        };

        let gameState = {
            currentScreen: 'start',
            currentRound: 1,
            currentProblem: 0,
            keys: 15,
            completedRounds: [],
            problems: [],
            currentProblemState: null
        };

        function saveProgress() {
            const saveData = {
                keys: gameState.keys,
                completedRounds: gameState.completedRounds,
                currentRound: gameState.currentRound,
                currentProblem: gameState.currentProblem
            };
            localStorage.setItem('game_progress', JSON.stringify(saveData));
        }

        function loadProgress() {
            const saved = localStorage.getItem('game_progress');
            if (saved) {
                const data = JSON.parse(saved);
                gameState.keys = data.keys || 15;
                gameState.completedRounds = data.completedRounds || [];
                gameState.currentRound = data.currentRound || 1;
                gameState.currentProblem = data.currentProblem || 0;
            }
        }

        function renderStartScreen() {
            const html = `
                <div class="container">
                    <div class="start-screen">
                        <div class="sparkles">
                            <div class="sparkle" style="top: 20%; left: 15%; animation-delay: 0s;"></div>
                            <div class="sparkle" style="top: 30%; left: 80%; animation-delay: 0.5s;"></div>
                            <div class="sparkle" style="top: 60%; left: 25%; animation-delay: 1s;"></div>
                            <div class="sparkle" style="top: 70%; left: 75%; animation-delay: 1.5s;"></div>
                            <div class="sparkle" style="top: 40%; left: 50%; animation-delay: 0.8s;"></div>
                        </div>
                        
                        <div class="title-main">‚ö°Ïó∞ÏÉÅÏ≤úÏû¨‚ö°</div>
                        <div class="subtitle">ÎáåÍ∞Ä ÌÑ∞Ïßà Í≤É Í∞ôÏùÄ ÏæåÍ∞ê</div>
                        <div class="highlight">ÎãπÏã†ÏùÄ IQ 140 Ï≤úÏû¨ÏûÖÎãàÍπå?</div>
                        <button class="start-button" onclick="AudioManager.playSound('click'); showRoundMap()">
                            üß† ÏãúÎÉÖÏä§ Í∞ÄÎèô
                        </button>
                    </div>
                </div>
            `;
            document.getElementById('app').innerHTML = html;
        }

        function showRoundMap() {
            const nextRound = gameState.completedRounds.length > 0 ? 
                Math.max(...gameState.completedRounds) + 1 : 1;
            
            const html = `
                <div class="container">
                    <div class="header">
                        <div class="compact-header">
                            <div class="header-left">
                                <div class="round-info-compact">
                                    <div class="round-title">Ïó∞ÏÉÅÏ≤úÏû¨</div>
                                    <div class="problem-number">ÎùºÏö¥ÎìúÎ•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî</div>
                                </div>
                            </div>
                            <div class="header-right">
                                <div class="key-count">üîë ${gameState.keys}</div>
                                <button class="settings-button-header" onclick="toggleMusicPanel()">‚öôÔ∏è</button>
                            </div>
                        </div>
                    </div>
                    
                    <div class="main-content">
                        <div class="round-map">
                            <h2 style="text-align: center; margin-bottom: 15px; color: #555; font-size: 18px;">ÎùºÏö¥Îìú ÏÑ†ÌÉù</h2>
                            <div class="round-grid">
                                ${Array.from({ length: 100 }, (_, i) => {
                                    const roundNumber = i + 1;
                                    const isCompleted = gameState.completedRounds.includes(roundNumber);
                                    const isCurrent = roundNumber === nextRound;
                                    const isLocked = roundNumber > nextRound;
                                    
                                    return `
                                        <button 
                                            class="round-button ${isCompleted ? 'completed' : isCurrent ? 'current' : isLocked ? 'locked' : 'current'}"
                                            onclick="${isLocked ? '' : `AudioManager.playSound('click'); startRound(${roundNumber})`}"
                                            ${isLocked ? 'disabled' : ''}
                                        >
                                            ${roundNumber}
                                            ${isCompleted ? '‚úÖ' : isCurrent ? '‚≠ê' : isLocked ? 'üîí' : 'üéØ'}
                                        </button>
                                    `;
                                }).join('')}
                            </div>
                        </div>
                    </div>
                    
                    <div class="music-panel"></div>
                </div>
            `;
            
            document.getElementById('app').innerHTML = html;
            gameState.currentScreen = 'roundMap';
            updateMusicPanel();
        }

        async function startRound(roundNumber) {
            try {
                const fileNumber = Math.ceil(roundNumber / 10);
                const response = await fetch(`problems_${fileNumber}.json`);
                const allProblems = await response.json();
                
                const problemsPerRound = 6;
                const startIndex = ((roundNumber - 1) % 10) * problemsPerRound;
                const roundProblems = allProblems.slice(startIndex, startIndex + problemsPerRound);
                
                gameState.currentRound = roundNumber;
                gameState.currentProblem = 0;
                gameState.problems = roundProblems;
                
                gameState.currentProblemState = {
                    unlockedHints: [0, 1],
                    showDescriptions: [false, false, false, false, false, false],
                    canShowDescriptions: false,
                    showCharacterCount: false,
                    showCategory: false,
                    showChosung: false,
                    userAnswer: '',
                    isCorrect: false,
                    geniusTimer: 20,
                    geniusTimerActive: true,
                    timerInterval: null
                };
                
                startGeniusTimer();
                renderGame();
                saveProgress();
                
            } catch (error) {
                console.error('ÎùºÏö¥Îìú ÏãúÏûë Ïã§Ìå®:', error);
                alert('Î¨∏Ï†úÎ•º Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
                showRoundMap();
            }
        }

        function renderGame() {
            if (!gameState.currentProblemState || gameState.problems.length === 0) {
                showRoundMap();
                return;
            }

            const problem = gameState.problems[gameState.currentProblem];
            const state = gameState.currentProblemState;

            const html = `
                <div class="container">
                    <div class="header">
                        <div class="compact-header">
                            <div class="header-left">
                                <button class="home-button" onclick="AudioManager.playSound('click'); showRoundMap()">üè†</button>
                                <div class="round-info-compact">
                                    <div class="round-title">ÎùºÏö¥Îìú ${gameState.currentRound}</div>
                                    <div class="problem-number">Î¨∏Ï†ú ${gameState.currentProblem + 1}/6</div>
                                </div>
                            </div>
                            <div class="header-right">
                                <div class="key-count">üîë ${gameState.keys}</div>
                                <button class="settings-button-header" onclick="toggleMusicPanel()">‚öôÔ∏è</button>
                                <div class="progress-dots">
                                    ${Array.from({ length: 6 }, (_, i) => `
                                        <div class="dot ${i < gameState.currentProblem ? 'completed' : i === gameState.currentProblem ? 'current' : ''}"></div>
                                    `).join('')}
                                </div>
                            </div>
                        </div>
                        
                        ${state.geniusTimerActive && !state.isCorrect ? `
                            <div class="genius-timer">
                                <div class="genius-timer-header">
                                    <div class="genius-timer-text">‚ö° Ï≤úÏû¨ Î≥¥ÎÑàÏä§ ÏãúÍ∞Ñ</div>
                                    <div class="genius-timer-count">${state.geniusTimer}Ï¥à</div>
                                </div>
                                <div class="timer-bar">
                                    <div class="timer-progress" style="width: ${(state.geniusTimer / 20) * 100}%"></div>
                                </div>
                            </div>
                        ` : ''}
                    </div>
                    
                    <div class="main-content">
                        <div class="hints-section">
                            <div class="hints-container">
                                ${problem.hints.map((hint, index) => {
                                    const isUnlocked = state.unlockedHints.includes(index);
                                    const showDescription = state.showDescriptions[index] || state.isCorrect;
                                    const isLocked = !isUnlocked;
                                    
                                    return `
                                        <div class="hint-item ${isLocked ? 'locked' : ''}">
                                            <div class="hint-content">
                                                <div class="hint-header">
                                                    <div class="hint-left">
                                                        <div class="hint-number">${index + 1}</div>
                                                        <div class="hint-text">
                                                            ${isUnlocked ? hint : 'üîí Ïû†Í∏¥ ÌûåÌä∏'}
                                                        </div>
                                                    </div>
                                                    ${isLocked && index >= 3 ? `
                                                        <div class="hint-controls">
                                                            <button class="unlock-btn" onclick="unlockHint(${index})">üîì1</button>
                                                            <button class="unlock-btn" onclick="watchAdForHint(${index})">üì∫</button>
                                                        </div>
                                                    ` : ''}
                                                </div>
                                                ${isUnlocked && showDescription ? `
                                                    <div class="description">${problem.descriptions[index]}</div>
                                                ` : ''}
                                                ${isUnlocked && state.canShowDescriptions && !showDescription && !state.isCorrect ? `
                                                    <div class="hint-controls" style="margin-top: 6px;">
                                                        <button class="unlock-btn" onclick="unlockDescription(${index})">ÏÑ§Î™ÖÎ≥¥Í∏∞ üîì1</button>
                                                        <button class="unlock-btn" onclick="watchAdForDescription(${index})">ÏÑ§Î™ÖÎ≥¥Í∏∞ üì∫</button>
                                                    </div>
                                                ` : ''}
                                            </div>
                                        </div>
                                    `;
                                }).join('')}
                            </div>

                            ${state.unlockedHints.includes(5) && !state.isCorrect ? `
                                <div class="show-answer-section">
                                    <button class="show-answer-btn" onclick="showAnswer()">
                                        Ï†ïÎãµÎ≥¥Í∏∞ <span>üîì3</span> <span>üì∫</span>
                                    </button>
                                </div>
                            ` : ''}
                        </div>
                        
                        <div class="answer-section">
                            ${!state.isCorrect ? `
                                <div class="info-grid">
                                    <div class="info-box">
                                        <div class="info-label">Í∏ÄÏûêÏàò</div>
                                        <div class="info-value">${state.showCharacterCount ? problem.characterCount : '?'}</div>
                                    </div>
                                    <div class="info-box category">
                                        <div class="info-label">Î∂ÑÎ•ò</div>
                                        <div class="info-value">
                                            ${state.showCategory ? problem.category : '?'}
                                            ${state.unlockedHints.includes(4) && !state.showCategory ? `
                                                <button class="unlock-small" onclick="unlockCategory()">Ìï¥Í∏à</button>
                                            ` : ''}
                                        </div>
                                    </div>
                                    <div class="info-box chosung">
                                        <div class="info-label">Ï¥àÏÑ±</div>
                                        <div class="info-value">
                                            ${state.showChosung ? problem.chosung : '?'}
                                            ${state.unlockedHints.includes(5) && !state.showChosung ? `
                                                <button class="unlock-small" onclick="unlockChosung()">Ìï¥Í∏à</button>
                                            ` : ''}
                                        </div>
                                    </div>
                                </div>
                                
                                <div class="answer-input-wrapper">
                                    <input 
                                        type="text" 
                                        class="answer-input" 
                                        id="answerInput"
                                        placeholder="Ï†ïÎãµÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                                        value="${state.userAnswer}"
                                        autocomplete="off"
                                        oninput="updateUserAnswer(this.value)"
                                        onkeydown="if(event.key === 'Enter') checkAnswer()"
                                    />
                                    <button class="submit-button" onclick="checkAnswer()">ÏûÖÎ†•</button>
                                </div>
                            ` : `
                                <div class="correct-answer">
                                    <div class="correct-icon">üéØ</div>
                                    <div class="correct-text">${problem.answer.join(', ')}</div>
                                    <div class="correct-category">${problem.category}</div>
                                </div>
                                
                                <button class="next-button" onclick="nextProblem()">
                                    ${gameState.currentProblem === 5 ? 'üèÜ ÎùºÏö¥Îìú ÏôÑÎ£å' : '‚ûú Îã§Ïùå Î¨∏Ï†ú'}
                                </button>
                            `}
                        </div>
                    </div>
                    
                    <div class="music-panel"></div>
                </div>
            `;
            
            document.getElementById('app').innerHTML = html;
            updateMusicPanel();
        }

        function startGeniusTimer() {
            const state = gameState.currentProblemState;
            if (state.timerInterval) clearInterval(state.timerInterval);
            
            state.timerInterval = setInterval(() => {
                if (!state.geniusTimerActive || state.isCorrect) {
                    clearInterval(state.timerInterval);
                    return;
                }
                
                state.geniusTimer--;
                
                if (state.geniusTimer <= 0) {
                    state.geniusTimerActive = false;
                    if (!state.unlockedHints.includes(2)) {
                        state.unlockedHints.push(2);
                    }
                    state.showCharacterCount = true;
                    
                    if (state.unlockedHints.includes(5)) {
                        state.showCategory = true;
                        state.showChosung = true;
                    }
                    
                    renderGame();
                    clearInterval(state.timerInterval);
                }
                
                const timerProgress = document.querySelector('.timer-progress');
                if (timerProgress) {
                    timerProgress.style.width = `${(state.geniusTimer / 20) * 100}%`;
                }
                
                const timerCount = document.querySelector('.genius-timer-count');
                if (timerCount) {
                    timerCount.textContent = `${state.geniusTimer}Ï¥à`;
                }
            }, 1000);
        }

        function unlockHint(hintIndex) {
            const state = gameState.currentProblemState;
            if (state.unlockedHints.includes(hintIndex)) return;
            
            if (gameState.keys > 0) {
                gameState.keys--;
                state.unlockedHints.push(hintIndex);
                AudioManager.playSound('hint');
                
                if (hintIndex === 3 && !state.canShowDescriptions) {
                    state.canShowDescriptions = true;
                }
                
                if (hintIndex === 5) {
                    state.showCategory = true;
                    state.showChosung = true;
                }
                
                saveProgress();
                renderGame();
            } else {
                alert('Ïó¥Ïá†Í∞Ä Î∂ÄÏ°±Ìï©ÎãàÎã§!');
            }
        }

        function watchAdForHint(hintIndex) {
            const state = gameState.currentProblemState;
            if (state.unlockedHints.includes(hintIndex)) return;
            
            if (confirm('Í¥ëÍ≥†Î•º ÏãúÏ≤≠ÌïòÏãúÍ≤†ÏäµÎãàÍπå?')) {
                state.unlockedHints.push(hintIndex);
                AudioManager.playSound('hint');
                
                if (hintIndex === 3 && !state.canShowDescriptions) {
                    state.canShowDescriptions = true;
                }
                
                if (hintIndex === 5) {
                    state.showCategory = true;
                    state.showChosung = true;
                }
                
                renderGame();
            }
        }

        function unlockDescription(descriptionIndex) {
            const state = gameState.currentProblemState;
            if (state.showDescriptions[descriptionIndex]) return;
            
            if (gameState.keys > 0) {
                gameState.keys--;
                state.showDescriptions[descriptionIndex] = true;
                saveProgress();
                renderGame();
            } else {
                alert('Ïó¥Ïá†Í∞Ä Î∂ÄÏ°±Ìï©ÎãàÎã§!');
            }
        }

        function watchAdForDescription(descriptionIndex) {
            const state = gameState.currentProblemState;
            if (state.showDescriptions[descriptionIndex]) return;
            
            if (confirm('Í¥ëÍ≥†Î•º ÏãúÏ≤≠ÌïòÏãúÍ≤†ÏäµÎãàÍπå?')) {
                state.showDescriptions[descriptionIndex] = true;
                renderGame();
            }
        }

        function unlockCategory() {
            const state = gameState.currentProblemState;
            if (state.showCategory) return;
            
            if (gameState.keys > 0) {
                gameState.keys--;
                state.showCategory = true;
                saveProgress();
                renderGame();
            } else {
                alert('Ïó¥Ïá†Í∞Ä Î∂ÄÏ°±Ìï©ÎãàÎã§!');
            }
        }

        function unlockChosung() {
            const state = gameState.currentProblemState;
            if (state.showChosung) return;
            
            if (gameState.keys > 0) {
                gameState.keys--;
                state.showChosung = true;
                saveProgress();
                renderGame();
            } else {
                alert('Ïó¥Ïá†Í∞Ä Î∂ÄÏ°±Ìï©ÎãàÎã§!');
            }
        }

        function showAnswer() {
            if (gameState.keys >= 3) {
                gameState.keys -= 3;
                showAnswerConfirm();
            } else {
                if (confirm('Ïó¥Ïá†Í∞Ä Î∂ÄÏ°±Ìï©ÎãàÎã§. Í¥ëÍ≥†Î•º ÏãúÏ≤≠ÌïòÏãúÍ≤†ÏäµÎãàÍπå?')) {
                    showAnswerConfirm();
                }
            }
        }

        function showAnswerConfirm() {
            const state = gameState.currentProblemState;
            
            showCongratulationPopup(6, false);
            state.isCorrect = true;
            state.unlockedHints = [0,1,2,3,4,5];
            state.showDescriptions = [true,true,true,true,true,true];
            state.showCharacterCount = true;
            state.showCategory = true;
            state.showChosung = true;
            state.geniusTimerActive = false;
            
            if (state.timerInterval) {
                clearInterval(state.timerInterval);
            }
            
            saveProgress();
            renderGame();
        }

        function updateUserAnswer(value) {
            gameState.currentProblemState.userAnswer = value;
        }

        function checkAnswer() {
            const input = document.getElementById('answerInput');
            const value = input ? input.value : gameState.currentProblemState.userAnswer;
            
            const problem = gameState.problems[gameState.currentProblem];
            const state = gameState.currentProblemState;
            
            const normalizedAnswer = value.toLowerCase().replace(/\s+/g, '');
            const correctAnswers = problem.answer.map(ans => 
                ans.toLowerCase().replace(/\s+/g, '')
            );
            
            if (correctAnswers.includes(normalizedAnswer)) {
                const usedHints = state.unlockedHints.length;
                let soundType = 'correct';
                
                if (usedHints <= 2) {
                    soundType = 'genius';
                }
                
                const keyReward = showCongratulationPopup(usedHints, false);
                
                if (keyReward > 0) {
                    gameState.keys += keyReward;
                }
                
                AudioManager.playSound(soundType);
                state.isCorrect = true;
                state.unlockedHints = [0,1,2,3,4,5];
                state.showDescriptions = [true,true,true,true,true,true];
                state.showCharacterCount = true;
                state.showCategory = true;
                state.showChosung = true;
                state.geniusTimerActive = false;
                
                if (state.timerInterval) {
                    clearInterval(state.timerInterval);
                }
                
                saveProgress();
                renderGame();
            } else {
                AudioManager.playSound('wrong');
                const inputEl = document.getElementById('answerInput');
                if (inputEl) {
                    inputEl.style.animation = 'shake 0.3s';
                    setTimeout(() => {
                        inputEl.style.animation = '';
                        inputEl.select();
                    }, 300);
                }
            }
        }

        function nextProblem() {
            AudioManager.playSound('click');
            
            if (gameState.currentProblem < 5) {
                gameState.currentProblem++;
                gameState.currentProblemState = {
                    unlockedHints: [0, 1],
                    showDescriptions: [false, false, false, false, false, false],
                    canShowDescriptions: false,
                    showCharacterCount: false,
                    showCategory: false,
                    showChosung: false,
                    userAnswer: '',
                    isCorrect: false,
                    geniusTimer: 20,
                    geniusTimerActive: true,
                    timerInterval: null
                };
                startGeniusTimer();
                saveProgress();
                renderGame();
            } else {
                gameState.completedRounds.push(gameState.currentRound);
                gameState.keys += 1;
                AudioManager.playSound('complete');
                saveProgress();
                showRoundComplete();
            }
        }

        function showRoundComplete() {
            const html = `
                <div class="container">
                    <div class="header">
                        <div class="compact-header">
                            <div class="header-left">
                                <button class="home-button" onclick="showRoundMap()">üè†</button>
                                <div class="round-info-compact">
                                    <div class="round-title">ÎùºÏö¥Îìú ÏôÑÎ£å!</div>
                                    <div class="problem-number">Ï∂ïÌïòÌï©ÎãàÎã§!</div>
                                </div>
                            </div>
                            <div class="header-right">
                                <div class="key-count">üîë ${gameState.keys}</div>
                                <button class="settings-button-header" onclick="toggleMusicPanel()">‚öôÔ∏è</button>
                            </div>
                        </div>
                    </div>
                    
                    <div class="main-content">
                        <div class="correct-answer">
                            <div class="correct-icon">üéâ</div>
                            <div class="correct-title">ÎùºÏö¥Îìú ${gameState.currentRound} ÏôÑÎ£å!</div>
                            <div class="correct-text">+1 Ïó¥Ïá†Î•º ÌöçÎìùÌñàÏäµÎãàÎã§!</div>
                            <div class="correct-category">Îã§Ïùå ÎùºÏö¥ÎìúÏóê ÎèÑÏ†ÑÌï¥Î≥¥ÏÑ∏Ïöî</div>
                        </div>
                        
                        <button class="next-button" onclick="startRound(${gameState.currentRound + 1})" style="margin-bottom: 10px;">
                            üöÄ Îã§Ïùå ÎùºÏö¥Îìú
                        </button>
                        <button class="next-button" onclick="showRoundMap()" style="background: linear-gradient(135deg, #888, #666);">
                            üó∫Ô∏è Î©îÏù∏ÏúºÎ°ú
                        </button>
                    </div>
                </div>
            `;
            document.getElementById('app').innerHTML = html;
        }

        function showCongratulationPopup(hintsUsed, usedChosung) {
            let popupData = {};
            
            if (usedChosung) {
                popupData = {
                    title: "Ï¥àÏÑ±Ïù¥ ÏÇ¥Î†∏Îã§.„Ö†„Ö†",
                    message: "Îã§ÏùåÏóî Ï¥àÏÑ± ÏóÜÏù¥ ÎèÑÏ†Ñ!",
                    icon: "üî§",
                    reward: 0
                };
            } else {
                switch(hintsUsed) {
                    case 2:
                        popupData = {
                            title: "ÏãúÎÉÖÏä§ Ìè≠Î∞ú!",
                            message: "ÏôÄÏö∞, Ï≤úÏû¨ÏÖ®Íµ∞Ïöî!",
                            icon: "üß†",
                            reward: 1
                        };
                        break;
                    case 3:
                        popupData = {
                            title: "ÎÇ†Ïπ¥Î°úÏö¥Îç∞Ïöî?",
                            message: "Îõ∞Ïñ¥ÎÇú Ï∂îÎ¶¨Î†•Ïù¥ÏóêÏöî!",
                            icon: "üî•",
                            reward: 0
                        };
                        break;
                    case 4:
                        popupData = {
                            title: "Ïã§Î†•Ïûê Ïù∏Ï†ï!",
                            message: "Ïûò ÌïòÏÖ®Ïñ¥Ïöî!",
                            icon: "üëç",
                            reward: 0
                        };
                        break;
                    case 5:
                        popupData = {
                            title: "ÏßëÏ§ëÌï©ÏãúÎã§!",
                            message: "Ï°∞Í∏àÎßå Îçî ÏßëÏ§ëÌï¥Î≥¥ÏÑ∏Ïöî!",
                            icon: "üí™",
                            reward: 0
                        };
                        break;
                    default:
                        popupData = {
                            title: "ÌòπÏãú... Ï°∏ÏïòÎÇòÏöî?",
                            message: "Îã§Ïùå Î¨∏Ï†úÎäî ÌôîÏù¥ÌåÖ!",
                            icon: "üò¥",
                            reward: 0
                        };
                }
            }
            
            const popupHtml = `
                <div class="congratulation-popup">
                    <div class="popup-icon">${popupData.icon}</div>
                    <div class="popup-title">${popupData.title}</div>
                    <div class="popup-message">${popupData.message}</div>
                    ${popupData.reward > 0 ? `
                        <div class="popup-reward">üîë +${popupData.reward} Ïó¥Ïá† ÌöçÎìù!</div>
                    ` : ''}
                </div>
            `;
            
            document.body.insertAdjacentHTML('beforeend', popupHtml);
            
            setTimeout(() => {
                const popup = document.querySelector('.congratulation-popup');
                if (popup) popup.remove();
            }, 2000);
            
            return popupData.reward;
        }

        function toggleMusicPanel() {
            const panel = document.querySelector('.music-panel');
            const buttons = document.querySelectorAll('.settings-button-header');
            if (panel) {
                panel.classList.toggle('active');
                buttons.forEach(button => {
                    button.innerHTML = panel.classList.contains('active') ? '‚úñÔ∏è' : '‚öôÔ∏è';
                });
                updateMusicPanel();
            }
        }

        function updateMusicPanel() {
            const panel = document.querySelector('.music-panel');
            if (panel) {
                panel.innerHTML = `
                    <div style="margin-bottom: 8px; font-weight: bold; font-size: 13px;">üéµ ÏùåÏïÖ ÏÑ§Ï†ï</div>
                    <div class="music-controls">
                        <button class="mute-button bgm-button ${AudioManager.isBGMMuted ? 'muted' : ''}" onclick="toggleBGMMute()">
                            ${AudioManager.isBGMMuted ? 'üîá BGM OFF' : 'üéµ BGM ON'}
                        </button>
                        <button class="mute-button sfx-button ${AudioManager.isSFXMuted ? 'muted' : ''}" onclick="toggleSFXMute()">
                            ${AudioManager.isSFXMuted ? 'üîá Ìö®Í≥ºÏùå OFF' : 'üîä Ìö®Í≥ºÏùå ON'}
                        </button>
                    </div>
                `;
            }
        }

        function toggleBGMMute() {
            AudioManager.toggleBGM();
        }

        function toggleSFXMute() {
            AudioManager.toggleSFX();
        }

        async function initApp() {
            loadProgress();
            await AudioManager.init();
            renderStartScreen();
        }

        initApp();
    </script>
</body>
</html>